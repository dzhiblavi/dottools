#!/usr/bin/env python3

import os
import re
import argparse

import context
import config
from plugins import plugin
from util import env, tools
from util.logger import StdErrLogger, Tags, TAGS_DEPENDENCIES, logger, init_logger


def _parse_args():
    parser = argparse.ArgumentParser(description='Yet another yet another dotfiles management tool')

    parser.add_argument(
        '--config-file', '-c',
        help='Configuration description (.yaml)',
        default=os.getenv(env.CONFIG_FILE_PATH_ENV_VAR),
    )
    parser.add_argument(
        '--root',
        help='dottols root directory',
        default=os.getenv(
            env.ROOT_PATH_ENV_VAR,
            default=os.path.dirname(os.path.dirname(__file__)),
        ),
    )
    parser.add_argument(
        '--log', '-l',
        help=f'Enabled logging tags, (comma sep.) ({",".join(tag.name.lower() for tag in Tags)})',
        default='error',
        type=str,
    )
    parser.add_argument(
        '--field', '-f',
        help='The object to be processed',
        default='.*',
    )
    parser.add_argument(
        '--color',
        help='Whether to display color in output',
        choices=['yes', 'no'],
        default='yes',
    )

    subparsers = parser.add_subparsers(title='Commands', dest='command')
    subparsers.add_parser('config', help='Print compiled configuration')
    subparsers.add_parser('diff', help='Show difference')
    subparsers.add_parser('plan', help='Print actions that will be done when apply is used')
    subparsers.add_parser('apply', help='Apply configuration')
    compile_parser = subparsers.add_parser('compile', help='Show available plugins\' configuration')
    compile_parser.add_argument(
        '--full',
        help='Print extended config value',
        action='store_true',
    )

    return parser.parse_args()


def _get_must_be_enabled_tags(command):
    must_be_enabled = [
        Tags.OUTPUT,
    ]

    if command in {'plan'}:
        must_be_enabled.append(Tags.ACTION)

    if command in {'diff'}:
        must_be_enabled.append(Tags.DIFF)

    return must_be_enabled


def _get_logging_tags(name_list, command):
    must_be_enabled = _get_must_be_enabled_tags(command)
    tag_list = [Tags[name.upper()] for name in name_list]

    for tag in must_be_enabled:
        if tag in tag_list:
            continue

        tag_list.append(tag)

    while True:
        changed = False

        for tag, deps_list in TAGS_DEPENDENCIES.items():
            if tag in tag_list:
                for dep in deps_list:
                    if dep in tag_list:
                        continue

                    tag_list.append(dep)
                    changed = True

        if not changed:
            return tag_list


def _apply_command(args, plugin_instance, command):
    with logger().indent(label=f'{type(plugin_instance).__name__}.{command}'):
        if command == 'compile':
            if args.full:
                logger().log(
                    Tags.OUTPUT,
                    [''] + tools.safe_dump_yaml_lines(plugin_instance.to_dict())
                )
            else:
                logger().log(
                    Tags.OUTPUT,
                    [''] + tools.safe_dump_yaml_lines(plugin_instance.to_dict())
                )
            return

        if command == 'diff':
            plugin.Plugin.log_difference(plugin_instance.difference())
            return

        if command in {'plan', 'apply'}:
            if not plugin.Plugin.any_difference(plugin_instance.difference()):
                logger().info('No difference, nothing done')
                return

            plugin_instance.backup()
            plugin_instance.apply()
            return

        assert False, f'Invalid command {command}'


def main(args):
    config_path = os.path.realpath(args.config_file)

    init_logger(
        StdErrLogger(
            _get_logging_tags(args.log.split(','), args.command),
            args.color == 'yes',
        )
    )

    context.init_context(
        context.Context(
            config_path=config_path,
            dottools_root=os.path.realpath(args.root),
            dry_run=args.command in {'config', 'diff', 'plan', 'compile'},
        ),
    )

    cfg = config.create(tools.load_yaml_by_path(config_path))

    if args.command in {'config'}:
        logger().log(
            Tags.OUTPUT,
            [''] + tools.safe_dump_yaml_lines(cfg.to_dict()),
        )
        return

    matcher = re.compile(args.field)
    plugins_object = plugin.registry().create_all_plugins(cfg)
    all_plugins = tools.find_instances_of_subclasses(plugins_object, base_class=plugin.Plugin)

    for name, plug in all_plugins:
        if not matcher.search(name):
            logger().info(
                [
                    'Skipping plugin since it does not match field',
                    'plugin\t= %s',
                    'regex\t= %s',
                ], name, args.field,
            )
            continue

        with logger().indent(label=name):
            plug.build()
            _apply_command(args, plug, args.command)


if __name__ == '__main__':
    main(_parse_args())
