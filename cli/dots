#!/usr/bin/env python3

import os
import argparse

import dd_context
import dd_shellrc
import dd_dots
import util.dd_env
import util.dd_logger


def parse_args():
    parser = argparse.ArgumentParser(description='The .shellrc and dottools installer tool')

    parser.add_argument(
        '--config-file', '-c',
        help='Configuration description (.yaml)',
        default=os.getenv(util.dd_env.CONFIG_FILE_PATH_ENV_VAR),
    )
    parser.add_argument(
        '--root',
        help='dottols root directory',
        default=os.getenv(
            util.dd_env.ROOT_PATH_ENV_VAR,
            default=os.path.dirname(os.path.dirname(__file__)),
        ),
    )
    parser.add_argument(
        '--dry-run',
        help='Only print which actions will be done instead of doing anything',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '--log-level', '-l',
        help='Logging level [0..3]',
        default=1,
        action='store',
        type=int,
    )

    subparsers = parser.add_subparsers(title='Commands', dest='command')
    subparsers.add_parser('shellrc', help='Install .shellrc')
    subparsers.add_parser('dotfiles', help='Install dotfiles')
    subparsers.add_parser('all', help='Apply everything')
    subparsers.add_parser('diff', help='Equivalent to "dots --dry-run all" with higher log level')

    return parser.parse_args()


def main(args):
    if args.dry_run:
        args.log_level = max(args.log_level, util.dd_logger.LEVEL_ACTION)

    if args.command == 'diff':
        args.dry_run = True
        args.log_level = max(args.log_level, util.dd_logger.LEVEL_DIFF)

    context = dd_context.Context(
        config_path=os.path.realpath(args.config_file),
        dot_root=os.path.realpath(args.root),
        dry_run=args.dry_run,
        log_level=args.log_level,
    )

    if args.command in {'shellrc', 'all'}:
        with context.logger.indent(offset=0, label='shellrc'):
            dd_shellrc.process(context, context.cfg['shellrc'])

    if args.command in {'dotfiles', 'all'}:
        with context.logger.indent(offset=0, label='dots'):
            dd_dots.process(context, context.cfg.get('dots', []))

    if args.command in {'diff'}:
        with context.logger.indent(offset=0, label='shellrc'):
            dd_shellrc.process(context, context.cfg['shellrc'])
        with context.logger.indent(offset=0, label='dots'):
            dd_dots.process(context, context.cfg.get('dots', []))


if __name__ == '__main__':
    main(parse_args())
